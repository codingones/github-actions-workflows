name: Semantic Release

on:
  workflow_call:
    inputs:
      node-version:
        required: false
        type: string
        default: 'lts/*'
      package-manager:
        required: false
        type: string
        default: 'npm'
      install-dependencies-command:
        required: false
        type: string
        default: 'npm ci'
      cache-dependency-path:
        required: false
        type: string
        default: 'package-lock.json'

    secrets:
      PAT:
        required: true
      AWS_ACCESS_KEY_ID:
        required: false
      AWS_SECRET_ACCESS_KEY:
        required: false
      AWS_DEFAULT_REGION:
        required: false

    outputs:
      version:
        description: 'The next release version'
        value: ${{ jobs.release.outputs.version }}


jobs:
  release:
    name: Release using semantic-release config.
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.latest-release.outputs.version }}

    steps:
      - name: Checkout repo with complete history
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT }}
          fetch-depth: 0

      - name: Set up Node.js #does NOT install dependencies
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: ${{ inputs.package-manager }}
          cache-dependency-path: ${{ inputs.cache-dependency-path }}

      - name: Install dependencies #use cache from previous successful workflow runs if able
        run: ${{ inputs.install-dependencies-command }}

      - name: Release
        id: release
        env:
          GH_TOKEN: ${{ secrets.PAT }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
        run: |
          npx semantic-release

      - name: Get release version
        id: latest-release
        run: |
          RELEASE_VERSION=$(gh release list --repo ${{ github.repository }} | head -n 1 | cut -f 1)
          echo "version=$RELEASE_VERSION" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ secrets.PAT }}
